<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 01.配置数据源 -->
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.xiaomi.editor"></context:component-scan>
    <context:component-scan base-package="com.xiaomi.editor.dao"></context:component-scan>

    <!--日志-->
    <context:component-scan base-package="com.xiaomi.editor.utils"/>

    <!--配置生成API文件-->
    <!--<mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/"/>-->
    <!--<mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>-->
    <!--<context:component-scan base-package="springfox.*"/>-->

    <!-- 1.1 关联jdbc.properties -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--&lt;!&ndash; 配置数据源 &ndash;&gt;-->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"-->
          <!--destroy-method="close">-->
        <!--<property name="driverClass" value="${dataSource.driverClass}"></property>-->
        <!--<property name="jdbcUrl" value="${dataSource.jdbcUrl}"></property>-->
        <!--<property name="user" value="${dataSource.user}"></property>-->
        <!--<property name="password" value="${dataSource.password}"></property>-->
        <!--&lt;!&ndash;初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3&ndash;&gt;-->
        <!--<property name="initialPoolSize" value="${dataSource.initialPoolSize}"></property>-->
        <!--&lt;!&ndash;最大连接池数量  连接池中保留的最大连接数。默认值: 15&ndash;&gt;-->
        <!--<property name="maxPoolSize" value="${dataSource.maxPoolSize}"></property>-->
        <!--&lt;!&ndash;连接池中保留的最小连接数，默认为：3&ndash;&gt;-->
        <!--<property name="minPoolSize" value="${dataSource.minPoolSize}"></property>-->
        <!--&lt;!&ndash;最大空闲时间，1000秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 &ndash;&gt;-->
        <!--<property name="maxIdleTime" value="${dataSource.maxIdleTime}"></property>-->
    <!--</bean>-->

    <!-- spring配置duid数据库连接池的数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password127.0.0.1 -->
        <property name="driverClassName" value="${dataSource.driverClass}" />
        <property name="url" value="${dataSource.jdbcUrl}" />
        <property name="username" value="${dataSource.user}" />
        <property name="password" value="${dataSource.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${dataSource.initialPoolSize}" />
        <property name="minIdle" value="${dataSource.minPoolSize}" />
        <property name="maxActive" value="${dataSource.maxPoolSize}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${dataSource.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${dataSource.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${dataSource.minEvictableIdleTimeMillis}" />

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="SELECT 'x' from dual " />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 扫描model包 使用别名 -->
        <property name="typeAliasesPackage" value="com.xiaomi.editor.bean"/>
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"/>
    </bean>

    <!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.xiaomi.editor.dao"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置基于注解的声明式事务 -->
    <!-- 自定义事务管理 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>



    <!-- 定义静态页面访问 -->
    <mvc:resources mapping="/static/**" location="/static/"/>


    <!-- task任务扫描注解 -->
    <task:executor id="executor" pool-size="3"/>
    <task:scheduler id="scheduler" pool-size="3"/>
    <task:annotation-driven executor="executor" scheduler="scheduler"/>
    <!--定时任务开始-->
    <!--定时任务包-->
    <context:component-scan base-package="com.xiaomi.editor.task"></context:component-scan>

    <!--启用定时任务-->
    <!--<task:scheduled-tasks>-->
        <!--&lt;!&ndash;ref:类注解的值  method:方法名-->
        <!--cron:表达式  详解：https://www.cnblogs.com/javahr/p/8318728.html-->
        <!--&ndash;&gt;-->
        <!--&lt;!&ndash;每天的10:00—11:00 每5s执行一次&ndash;&gt;-->
        <!--<task:scheduled ref="TestTask" method="sysTime" cron="0/5 * 10 * * *"/>-->
    <!--</task:scheduled-tasks>-->



</beans>